<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BoatApi</name>
    </assembly>
    <members>
        <member name="M:BoatApi.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,BoatApi.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:BoatApi.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:BoatApi.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:BoatApi.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BoatApi.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:BoatApi.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:BoatApi.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:BoatApi.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BoatApi.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:BoatApi.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,BoatApi.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,BoatApi.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(BoatApi.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:BoatApi.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},BoatApi.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:BoatApi.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:BoatApi.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleKey.#ctor(BoatApi.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:BoatApi.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,BoatApi.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:BoatApi.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:BoatApi.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BoatApi.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:BoatApi.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:BoatApi.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BoatApi.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="T:BoatApi.Business.AuthenticationBusiness">
            <summary>
            The business layer class to manage user
            </summary>
        </member>
        <member name="M:BoatApi.Business.AuthenticationBusiness.#ctor(BoatApi.Business.Logic.Common.IUnitOfWork)">
            <summary>
            Contructor with the unitOfWork
            </summary>
            <param name="unitOfWork">The object unitOfWork</param>
        </member>
        <member name="M:BoatApi.Business.AuthenticationBusiness.Logout">
            <summary>
            Logout the current logged user
            </summary>
        </member>
        <member name="M:BoatApi.Business.AuthenticationBusiness.Authenticate(BoatApi.Models.Communication.Request.LoginForm)">
            <summary>
            Authenticate user with email and password in a form
            </summary>
            <param name="loginForm">The form contains email/password</param>
        </member>
        <member name="M:BoatApi.Business.AuthenticationBusiness.IsUserLoggedIn">
            <summary>
            Check user logged in or not
            </summary>
            <returns>true if user logged in, otherwise, return false</returns>
        </member>
        <member name="T:BoatApi.Business.BoatBusiness">
            <summary>
            The business layer class to manage boat
            </summary>
        </member>
        <member name="M:BoatApi.Business.BoatBusiness.#ctor(BoatApi.Business.Logic.Common.IUnitOfWork)">
            <summary>
            Contructor with the unitOfWork
            </summary>
            <param name="unitOfWork">The object unitOfWork</param>
        </member>
        <member name="M:BoatApi.Business.BoatBusiness.GetAll">
            <summary>
            Get all boats
            </summary>
            <returns></returns>
        </member>
        <member name="M:BoatApi.Business.BoatBusiness.GetOne(System.Nullable{System.Guid})">
            <summary>
            Find a boat by id
            </summary>
            <param name="boatId">The boat id</param>
            <returns>The boat if found</returns>
            <exception cref="T:BoatApi.WebException.RecordNotFoundException">If the databse does not contain any boat with the given id</exception>
        </member>
        <member name="M:BoatApi.Business.BoatBusiness.CreateOne(BoatApi.Models.Communication.Request.BoatForm)">
            <summary>
            Create a new boat and save to database
            </summary>
            <param name="addBoatForm">The form contains boat's information</param>
            <returns>Id of the new boat</returns>
        </member>
        <member name="M:BoatApi.Business.BoatBusiness.Delete(System.Nullable{System.Guid})">
            <summary>
            Delete an existing boat with id
            </summary>
            <param name="boatId">Id of the boat</param>
            <exception cref="T:BoatApi.WebException.RecordNotFoundException">If not found</exception>
        </member>
        <member name="M:BoatApi.Business.BoatBusiness.Update(System.Nullable{System.Guid},BoatApi.Models.Communication.Request.BoatForm)">
            <summary>
            Update information of an existing boat
            </summary>
            <param name="boatId">Id of the boat</param>
            <param name="updateBoatForm">The form contains boat's information</param>
            <exception cref="T:BoatApi.WebException.RecordNotFoundException">If not found</exception>
        </member>
        <member name="T:BoatApi.Business.GoodBusiness">
            <summary>
            The business layer class to manage good
            </summary>
        </member>
        <member name="M:BoatApi.Business.GoodBusiness.#ctor(BoatApi.Business.Logic.Common.IUnitOfWork)">
            <summary>
            Contructor with the unitOfWork
            </summary>
            <param name="unitOfWork">The object unitOfWork</param>
        </member>
        <member name="M:BoatApi.Business.GoodBusiness.GetAll">
            <summary>
            Get all good
            </summary>
            <returns>The list of good</returns>
        </member>
        <member name="M:BoatApi.Business.GoodBusiness.GetByBoat(System.Nullable{System.Guid})">
            <summary>
            Get all goods contained in a boat
            </summary>
            <param name="boatId">Id of the boat</param>
            <returns>The list of good contained in the boat</returns>
        </member>
        <member name="M:BoatApi.Business.GoodBusiness.CreateOne(BoatApi.Models.Communication.Request.GoodForm)">
            <summary>
            Create a new Good
            </summary>
            <param name="addBoatForm">The form contains the new good's information</param>
            <returns>Guid of the new good</returns>
        </member>
        <member name="M:BoatApi.Business.GoodBusiness.Delete(System.Nullable{System.Guid})">
            <summary>
            Delete a good record from database
            </summary>
            <param name="goodId">id of the good</param>
        </member>
        <member name="M:BoatApi.Business.GoodBusiness.Update(System.Nullable{System.Guid},BoatApi.Models.Communication.Request.GoodForm)">
            <summary>
            Update information of an existing Good
            </summary>
            <param name="goodId">The id of good</param>
            <param name="goodForm">The form contains good's information</param>
            <exception cref="T:BoatApi.WebException.RecordNotFoundException">When we can not found the good or the new boat</exception>
        </member>
        <member name="M:BoatApi.Business.GoodBusiness.GetOne(System.Nullable{System.Guid})">
            <summary>
            Get a good record by id
            </summary>
            <param name="goodId">Id of the record</param>
            <returns>The good record</returns>
            <exception cref="T:BoatApi.WebException.RecordNotFoundException">If not found</exception>
        </member>
        <member name="T:BoatApi.Business.Logic.Common.BaseRepository`1">
            <summary>
            Base repository for all model (should inherit from BaseModel)
            </summary>
            <typeparam name="T">The class of model</typeparam>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.#ctor(BoatApi.Business.Logic.Common.IUnitOfWork)">
            <summary>
            Contructor with unitOfWork
            </summary>
            <param name="unitOfWork">UnitOfWork object</param>
            <exception cref="T:System.ArgumentNullException">When unitOfWork is null</exception>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.GetById(System.Guid)">
            <summary>
            Get the object by id
            </summary>
            <param name="id">The object's id</param>
            <returns>The object if found or an exception will throw if not found</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.GetAll">
            <summary>
            Get all object(s) from database
            </summary>
            <returns>The list of object(s)</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.All(System.String[])">
            <summary>
            Get the queryable for all object(s)
            </summary>
            <param name="includes">List of field's name should be included innned</param>
            <returns>The queryable for all object(s)</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.FindOne(System.Guid)">
            <summary>
            Find an object by id
            </summary>
            <param name="id">The object's id</param>
            <returns>The object if found or a Null object if not found</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.FindOne(System.Nullable{System.Guid})">
            <summary>
            Find an object by id
            </summary>
            <param name="id">The object's id, id can be null</param>
            <returns>The object if found or a Null object if not found</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.FindOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String[])">
            <summary>
            Find an object by a predicate
            </summary>
            <param name="predicate">The predicate</param>
            <param name="includes">The list of field's name should include</param>
            <returns>The object if found, null if not found</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.Filter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String[])">
            <summary>
            Create a queryable for object(s) which match a predicate
            </summary>
            <param name="predicate">The predicate</param>
            <param name="includes">The list of field's name should include</param>
            <returns>The queryable for the given filter</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.Create(`0)">
            <summary>
            Create a new object to database.
            </summary>
            <param name="TObject">Specified a new object to create.</param>
            <returns>The created object</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.Delete(`0)">
            <summary>
            Delete the object from database.
            </summary>
            <param name="TObject">Specified a existing object to delete.</param>
            <returns>1 if success, 0 if failed</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.Update(`0)">
            <summary>
            Update object changes and save to database.
            </summary>
            <param name="TObject">Specified the object to save.</param>
            <returns>Number of effected objects</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete objects from database by specified filter expression.
            </summary>
            <param name="predicate"></param>
            <returns>Number of deleted objects</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.Contains(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Check if we have some object(s) is exists in database by specified filter.
            </summary>
            <param name="predicate">Specified the filter expression</param>
            <returns>true if the object(s) exist, false if not</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.SaveChanges">
            <summary>
            Saves the changes.
            </summary>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.BaseRepository`1.Dispose">
            <summary>
            Dispose the data context
            </summary>
        </member>
        <member name="T:BoatApi.Business.Logic.Common.IRepository`1">
            <summary>
            Interface for repository
            </summary>
            <typeparam name="T">The database model inhenrit from BaseModel</typeparam>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.All(System.String[])">
            <summary>
            Gets all objects from database
            </summary>
            <returns>The queryable of all objects</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.GetById(System.Guid)">
            <summary>
            Get the object by id
            </summary>
            <param name="id">The object's id</param>
            <returns>The object if found or an exception will throw if not found</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.FindOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String[])">
            <summary>
            Find one object(s) by a predicate
            </summary>
            <param name="predicate">The predicate</param>
            <param name="includes">The list of field's name should include</param>
            <returns>The object if found, null if not found</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.Filter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String[])">
            <summary>
            Create a queryable for object(s) which match a predicate
            </summary>
            <param name="predicate">The predicate</param>
            <param name="includes">The list of field's name should include</param>
            <returns>The queryable for the given filter</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.Contains(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the object(s) is exists in database by specified filter.
            </summary>
            <param name="predicate">Specified the filter expression</param>
            <returns>true if the object(s) exist, false if not</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.Create(`0)">
            <summary>
            Create a new object to database.
            </summary>
            <param name="t">Specified a new object to create.</param>
            <returns></returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.Delete(`0)">
            <summary>
            Delete the object from database.
            </summary>
            <param name="t">Specified a existing object to delete.</param>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete objects from database by specified filter expression.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.Update(`0)">
            <summary>
            Update object changes and save to database.
            </summary>
            <param name="t">Specified the object to save.</param>
            <returns>Number of effected objects</returns>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IRepository`1.SaveChanges">
            <summary>
            Saves the changes.
            </summary>
        </member>
        <member name="T:BoatApi.Business.Logic.Common.IUnitOfWork">
            <summary>
            Unit Of Work
            </summary>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IUnitOfWork.Commit">
            <summary>
            Call this to commit the unit of work
            </summary>
        </member>
        <member name="P:BoatApi.Business.Logic.Common.IUnitOfWork.DbContext">
            <summary>
            Return the database reference for this UOW
            </summary>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.IUnitOfWork.StartTransaction">
            <summary>
            Starts a transaction on this unit of work
            </summary>
        </member>
        <member name="T:BoatApi.Business.Logic.Common.UnitOfWork">
            <summary>
            Unit Of Work
            </summary>
        </member>
        <member name="P:BoatApi.Business.Logic.Common.UnitOfWork.DbContext">
            <summary>
            The databse context
            </summary>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.UnitOfWork.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.UnitOfWork.Dispose">
            <summary>
            Dispose the object
            </summary>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.UnitOfWork.StartTransaction">
            <summary>
            Create transaction scope
            </summary>
        </member>
        <member name="M:BoatApi.Business.Logic.Common.UnitOfWork.Commit">
            <summary>
            Commit the changes to the database
            </summary>
        </member>
        <member name="T:BoatApi.Business.Logic.UserRepository">
            <summary>
            Repository for users
            </summary>
        </member>
        <member name="M:BoatApi.Business.Logic.UserRepository.#ctor(BoatApi.Business.Logic.Common.IUnitOfWork)">
            <summary>
            Contructor with UnitOfWork
            </summary>
            <param name="unitOfWork">UnitOfWork object</param>
        </member>
        <member name="M:BoatApi.Business.Logic.UserRepository.FindUser(System.String,System.String)">
            <summary>
            Find a user has a specific email and password
            </summary>
            <param name="email">User's email</param>
            <param name="password">User's password</param>
            <returns></returns>
        </member>
        <member name="T:BoatApi.Controllers.AuthenticationController">
            <summary>
            Authentication Controller
            </summary>
        </member>
        <member name="M:BoatApi.Controllers.AuthenticationController.Post(BoatApi.Models.Communication.Request.LoginForm)">
            <summary>
            Login with email/password, both email and password will be stored in server.
            We allow multiple login with an account
            </summary>
            <param name="loginForm">Login form, with email/password</param>
            <returns>The status code is 200 if success, 401 if failed</returns>
        </member>
        <member name="M:BoatApi.Controllers.AuthenticationController.Delete">
            <summary>
            Logout
            </summary>
            <returns>The status code is 200 if success, 401 if failed</returns>
        </member>
        <member name="T:BoatApi.Controllers.Base.BaseController">
            <summary>
            Base controller
            </summary>
        </member>
        <member name="M:BoatApi.Controllers.Base.BaseController.#ctor">
            <summary>
            Default contructor, create unitOfWork and authenticationBusiness
            </summary>
        </member>
        <member name="M:BoatApi.Controllers.Base.BaseController.ExecuteAction(System.Action)">
            <summary>
            Execute a specific action
            </summary>
            <param name="action">The action to be executed</param>
            <returns></returns>
        </member>
        <member name="M:BoatApi.Controllers.Base.BaseController.ExecuteAction(System.Func{System.Web.Http.IHttpActionResult})">
            <summary>
            Execute a specific action
            </summary>
            <param name="action">The action to be executed</param>
            <returns></returns>
        </member>
        <member name="T:BoatApi.Controllers.BoatController">
            <summary>
            Boat controller
            </summary>
        </member>
        <member name="M:BoatApi.Controllers.BoatController.#ctor">
            <summary>
            The empty contructor
            </summary>
        </member>
        <member name="M:BoatApi.Controllers.BoatController.Get">
            <summary>
            Get the list of boats
            </summary>
            <returns>The list of boats</returns>
        </member>
        <member name="M:BoatApi.Controllers.BoatController.Get(System.Nullable{System.Guid})">
            <summary>
            Get a boat by a specific id
            </summary>
            <param name="boatId">The id of boat</param>
            <returns>The boat</returns>
        </member>
        <member name="M:BoatApi.Controllers.BoatController.Post(BoatApi.Models.Communication.Request.BoatForm)">
            <summary>
            Create a new boat
            </summary>
            <param name="addBoatForm"></param>
            <returns></returns>
        </member>
        <member name="M:BoatApi.Controllers.BoatController.Put(System.Nullable{System.Guid},BoatApi.Models.Communication.Request.BoatForm)">
            <summary>
            Update an existing boat
            </summary>
            <param name="boatId"></param>
            <param name="updateBoatForm"></param>
            <returns>The status code is 200 if success</returns>
        </member>
        <member name="M:BoatApi.Controllers.BoatController.Delete(System.Nullable{System.Guid})">
            <summary>
            Delete an existing boat
            </summary>
            <param name="boatId">Id of the boat</param>
            <returns>The status code is 200 if success</returns>
        </member>
        <member name="T:BoatApi.Controllers.GoodController">
            <summary>
            Good controller
            </summary>
        </member>
        <member name="M:BoatApi.Controllers.GoodController.#ctor">
            <summary>
            The empty controller
            </summary>
        </member>
        <member name="M:BoatApi.Controllers.GoodController.Get">
            <summary>
            Get the list of good
            </summary>
            <returns>The list of good</returns>
        </member>
        <member name="M:BoatApi.Controllers.GoodController.GetByBoat(System.Nullable{System.Guid})">
            <summary>
            Get the list of good contained in a boat
            </summary>
            <param name="id">The boat's id</param>
            <returns>The list of good contained in a boat</returns>
        </member>
        <member name="M:BoatApi.Controllers.GoodController.Post(BoatApi.Models.Communication.Request.GoodForm)">
            <summary>
            Create new a good record
            </summary>
            <param name="addGoodForm">The form contains the good's information</param>
            <returns>Guid of the new good</returns>
        </member>
        <member name="M:BoatApi.Controllers.GoodController.Delete(System.Nullable{System.Guid})">
            <summary>
            Delete an existing good record
            </summary>
            <param name="goodId">Id of the good record</param>
            <returns>The status code is 200 if success</returns>
        </member>
        <member name="M:BoatApi.Controllers.GoodController.Put(System.Nullable{System.Guid},BoatApi.Models.Communication.Request.GoodForm)">
            <summary>
            Update information of an existing Good
            </summary>
            <param name="goodId">Id of the Good</param>
            <param name="updateGoodForm">The form contains Good's information</param>
            <returns>The status code is 200 if success</returns>
        </member>
        <member name="M:BoatApi.Controllers.GoodController.Get(System.Nullable{System.Guid})">
            <summary>
            Get a good by a specific id
            </summary>
            <param name="goodId">The id of good</param>
            <returns>The record found</returns>
        </member>
        <member name="T:BoatApi.DataContext.ApplicationDBContext">
            <summary>
            Application Database Context class
            </summary>
        </member>
        <member name="P:BoatApi.DataContext.ApplicationDBContext.Users">
            <summary>
            Link to Users
            </summary>
        </member>
        <member name="P:BoatApi.DataContext.ApplicationDBContext.Authentications">
            <summary>
            Link to Authentications
            </summary>
        </member>
        <member name="P:BoatApi.DataContext.ApplicationDBContext.Boats">
            <summary>
            Link to Boats
            </summary>
        </member>
        <member name="P:BoatApi.DataContext.ApplicationDBContext.Good">
            <summary>
            Link to Goods
            </summary>
        </member>
        <member name="M:BoatApi.DataContext.ApplicationDBContext.#ctor">
            <summary>
            Empty contructor with Default Connection
            </summary>
        </member>
        <member name="M:BoatApi.DataContext.ApplicationDBContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            Inherit from base
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:BoatApi.Factories.GoodFactory">
            <summary>
            Factory for good
            </summary>
        </member>
        <member name="M:BoatApi.Factories.GoodFactory.CreateGoodDTO(BoatApi.Models.ServiceModel.Good)">
            <summary>
            Convert a good from the database to a good object DTO
            </summary>
            <param name="good">The good object from the database</param>
            <returns>The good DTO object</returns>
        </member>
        <member name="M:BoatApi.Factories.GoodFactory.CreateGood(BoatApi.Models.Communication.Request.GoodForm)">
            <summary>
            Create a good object
            </summary>
            <param name="addGoodForm">The form contains good's information</param>
            <returns>The created good object</returns>
        </member>
        <member name="T:BoatApi.Migrations.Configuration">
            <summary>
            The configuration for entity framework
            </summary>
        </member>
        <member name="M:BoatApi.Migrations.Configuration.#ctor">
            <summary>
            The empty contructor
            </summary>
        </member>
        <member name="T:BoatApi.Models.Common.Quality">
            <summary>
            The quality of good
            </summary>
        </member>
        <member name="F:BoatApi.Models.Common.Quality.Unknown">
            <summary>
            Unknown value
            </summary>
        </member>
        <member name="F:BoatApi.Models.Common.Quality.Bad">
            <summary>
            Bad quality
            </summary>
        </member>
        <member name="F:BoatApi.Models.Common.Quality.Normal">
            <summary>
            Normal quality
            </summary>
        </member>
        <member name="F:BoatApi.Models.Common.Quality.Good">
            <summary>
            Good quality
            </summary>
        </member>
        <member name="F:BoatApi.Models.Common.Quality.Excellent">
            <summary>
            Exellent quality
            </summary>
        </member>
        <member name="T:BoatApi.Models.Communication.Request.BoatForm">
            <summary>
            The form contains boat's information
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Request.BoatForm.Name">
            <summary>
            Boat's name
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Request.BoatForm.ImageUrl">
            <summary>
            Url to the image
            </summary>
        </member>
        <member name="T:BoatApi.Models.Communication.Request.GoodForm">
            <summary>
            The form contains good's information when we update or create a Good record
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Request.GoodForm.BoatId">
            <summary>
            Id of the boat contains good
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Request.GoodForm.Name">
            <summary>
            Name of good
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Request.GoodForm.ImageUrl">
            <summary>
            The url to good's photo
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Request.GoodForm.Quality">
            <summary>
            The quality of good
            </summary>
        </member>
        <member name="T:BoatApi.Models.Communication.Request.LoginForm">
            <summary>
            The form to login
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Request.LoginForm.Email">
            <summary>
            User's email
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Request.LoginForm.Password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="T:BoatApi.Models.Communication.Response.GoodDTO">
            <summary>
            Good model
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Response.GoodDTO.Id">
            <summary>
            The id from database
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Response.GoodDTO.Quanlity">
            <summary>
            The quality of good
            </summary>
        </member>
        <member name="P:BoatApi.Models.Communication.Response.GoodDTO.ImageUrl">
            <summary>
            Url to the image
            </summary>
        </member>
        <member name="T:BoatApi.Models.ServiceModel.Authentication">
            <summary>
            Authentication model
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.Authentication.User">
            <summary>
            The user
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.Authentication.SessionHash">
            <summary>
            The session hash
            </summary>
        </member>
        <member name="T:BoatApi.Models.ServiceModel.Base.BaseModel">
            <summary>
            The base model for every model
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.Base.BaseModel.Id">
            <summary>
            The key of model
            </summary>
        </member>
        <member name="T:BoatApi.Models.ServiceModel.Boat">
            <summary>
            The boat model
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.Boat.Name">
            <summary>
            Name of the boat
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.Boat.ImageUrl">
            <summary>
            Url to the image
            </summary>
        </member>
        <member name="T:BoatApi.Models.ServiceModel.Good">
            <summary>
            Good model
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.Good.Boat">
            <summary>
            The boat contains this good
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.Good.Quality">
            <summary>
            The quality of good
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.Good.ImageUrl">
            <summary>
            Url to the image
            </summary>
        </member>
        <member name="T:BoatApi.Models.ServiceModel.User">
            <summary>
            The User model
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.User.Name">
            <summary>
            User's fullname
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.User.Email">
            <summary>
            User's email
            </summary>
        </member>
        <member name="P:BoatApi.Models.ServiceModel.User.Password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="T:BoatApi.Utils.CookieUtil">
            <summary>
            For read/write cookie to the connection
            </summary>
        </member>
        <member name="M:BoatApi.Utils.CookieUtil.SetCookie(System.String,System.String)">
            <summary>
            Set cookie value for the current request
            </summary>
            <param name="cookieName">The cookie name</param>
            <param name="cookieValue">The cookie value</param>
        </member>
        <member name="M:BoatApi.Utils.CookieUtil.GetCookie(System.String)">
            <summary>
            Get the cookie value if presented, otherwise, return null
            </summary>
            <param name="cookieName">The cookie name</param>
            <returns>The value of cookie</returns>
        </member>
        <member name="M:BoatApi.Utils.CookieUtil.ClearCookie">
            <summary>
            Clear cookie for the current request
            </summary>
        </member>
        <member name="T:BoatApi.WebException.RecordNotFoundException">
            <summary>
            Error when the record could not found from the request
            </summary>
        </member>
    </members>
</doc>
